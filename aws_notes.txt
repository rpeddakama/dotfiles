#Prerequisites
- AWS account
- GitHub Personal Access Token
- MongoDB Atlas (free tier cluster)
- Domain Name

#Helpful Commands
## Terminal
### SSH into EC2 instance
- ssh -i path\to\key_pair.pem ec2-user@your-instance-public-ip
### Copy files to EC2 instance
- scp -i path\to\key_pair.pem -r path\to\frontend\build ec2-user@your-instance-public-ip:/home/ec2-user/app/frontend/build
## PM2
- pm2 list # To check status of your app
- pm2 logs # To view logs
- pm2 restart all

#Setting up MongoDB Atlas
- Network Access -> Add IP Address -> 0.0.0.0/0
- Database Access -> Add New Database User -> Password authentication
- Get the Mongo connection string and store it in environment variables in your project

#Preparing Your Application for AWS Deployment
- Frontend .env
	- REACT_APP_API_URL=https://yourdomain.com/server
- Backend .env
	- PORT=5000
	- NODE_ENV=production
	- CLIENT_URL=yourdomain.com


#Setting Up AWS Services for Backend Deployment
## Install and Configure AWS CLI
- Download and install the AWS CLI from the official AWS website
- Run aws configure and enter your AWS access key ID and secret access key

## Create an EC2 Instance
- Create EC2 instance
- Choose an Amazon Machine Image (AMI)
- t2.micro (Free tier eligible)
- Storage: Default 8GB is usually sufficient to start
### Configure Security Group
- Create a new security group
- Allow SSH (port 22) from your IP
- Allow HTTP (port 80) and HTTPS (port 443) from anywhere

Create a new key pair, download it, and keep it secure

### Elastic IP (optional)
- Allocate new Elastic IP in EC2 dashboard
- Associate it with EC2 instance

### Security Group
- EC2 Dashboard -> Security Groups -> Create new security group
- Verify these inbound rules exist (if not, add them):
	- Type, Protocol, PortRange, Source
	- SSH, TCP, 22, 0.0.0.0/0
	- HTTP, TCP, 80, 0.0.0.0/0
	- HTTPS, TCP, 443, 0.0.0.0/0
	- Custom TCP, TCP, 5000, 0.0.0.0/0
- Associate security group with EC2 instance

### Creating and Attaching IAM Role to EC2 Instance
- IAM in AWS Console -> Roles -> Create role -> EC2 as a service
	- Attach policies: AmazonEC2FullAccess, AmazonS3FullAccess
- EC2 Dashboard -> Actions -> Security -> Modify IAM role -> Select role you just created

### Installing Node.js and Git (Note, may need to be updated with newer versions of Node in the future)
- SSH into instance and run:
- curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
. ~/.nvm/nvm.sh
- nvm install 14  # or your preferred Node.js version
- sudo yum install git -y

#Transferring Files to EC2 Instance
## Backend
- In my experience, using scp has caused issues, so I use Github Personal Access Tokens
- GitHub -> Settings -> Developer settings -> Personal access tokens -> Generate new token ("repo" scope)
- In your EC2 Instance:
- cd /home/ec2-user
- git clone https://github.com/<YOUR-USERNAME>/<YOUR-REPO-NAME>.git app #Then paste personal access token instead of your password
- cd app/backend
- npm install
- npm run build # if you're using typescript
- nano .env #Add environment variables here
### Start application (one of the below options)
- npm start
or
- nvm install --lts
- node --version
- nvm use --lts
- node dist/server.js  # if you're using TypeScript and have built your project
### Keep Application Running
- npm install -g pm2
- pm2 start npm -- start  # if you have a start script
or
- pm2 start dist/server.js  # if you're using TypeScript
then
- pm2 startup
- pm2 save
- Can test application by making a request to: http://your-ec2-public-ip:your-port
## Frontend
- 
